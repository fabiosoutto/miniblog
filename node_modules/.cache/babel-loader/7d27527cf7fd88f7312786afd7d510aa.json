{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nimport { db } from \"../firebase/config\";\nimport { collection, query, orderBy, onSnapshot, where } from \"firebase/firestore\";\nexport const useFetchDocuments = function (docCollection) {\n  _s();\n\n  let search = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let uid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  const [documents, setDocuments] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setloading] = useState(null); // deal with memory leak\n\n  const [cancelled, setCancelled] = useState(false);\n  useEffect(() => {\n    async function loadData() {\n      if (cancelled) return;\n      setloading(true);\n      const collectionRef = await collection(db, docCollection);\n\n      try {\n        let q; //Dashboard\n        // Search\n\n        if (search) {\n          q = await query(collectionRef, where(\"tags\", \"array-contains\", search), orderBy(\"createdAt\", \"desc\"));\n        } else {\n          q = await query(collectionRef, orderBy(\"createdAt\", \"desc\"));\n        }\n\n        await onSnapshot(q, querySnapshot => {\n          setDocuments(querySnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data()\n          })));\n        });\n        setloading(false);\n      } catch (error) {\n        console.log(error);\n        setError(error.message);\n        setloading(false);\n      }\n    }\n\n    loadData();\n  }, [docCollection, search, uid, cancelled]);\n  useEffect(() => {\n    return () => setCancelled(true);\n  }, []);\n  return {\n    documents,\n    loading,\n    error\n  };\n};\n\n_s(useFetchDocuments, \"YEES7857tssNxT5z4p2JKJf7jug=\");","map":{"version":3,"names":["useState","useEffect","db","collection","query","orderBy","onSnapshot","where","useFetchDocuments","docCollection","search","uid","documents","setDocuments","error","setError","loading","setloading","cancelled","setCancelled","loadData","collectionRef","q","querySnapshot","docs","map","doc","id","data","console","log","message"],"sources":["C:/xampp/htdocs/Curso ReactJS/Curso ReactJS - Matheus Battisti/Projetos ReactJS/miniblog/src/hooks/useFetchDocuments.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport { db } from \"../firebase/config\";\r\nimport {\r\n    collection,\r\n    query,\r\n    orderBy,\r\n    onSnapshot,\r\n    where,\r\n} from \"firebase/firestore\";\r\n\r\n\r\nexport const useFetchDocuments = (docCollection, search = null, uid = null) => {\r\n\r\n    const [documents, setDocuments] = useState(null);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setloading] = useState(null);\r\n\r\n\r\n    // deal with memory leak\r\n    const [cancelled, setCancelled] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        async function loadData() {\r\n            if(cancelled) return;\r\n\r\n            setloading(true);\r\n\r\n            const collectionRef = await collection(db, docCollection);\r\n\r\n            try {\r\n                let q;\r\n\r\n                //Dashboard\r\n                // Search\r\n                if(search) {\r\n                    q = await query(collectionRef, where(\"tags\", \"array-contains\", search), orderBy(\"createdAt\", \"desc\")\r\n                    );\r\n                } else {\r\n                    q = await query(collectionRef, orderBy(\"createdAt\", \"desc\"));\r\n                }\r\n\r\n                await onSnapshot(q, (querySnapshot) => {\r\n\r\n                    setDocuments(\r\n                        querySnapshot.docs.map((doc) => ({\r\n                            id: doc.id,\r\n                            ...doc.data(),\r\n                        }))\r\n                    );\r\n                });\r\n\r\n                setloading(false);\r\n            } catch (error) {\r\n                console.log(error);\r\n                setError(error.message);\r\n\r\n                setloading(false);\r\n            }\r\n\r\n        }\r\n        loadData();\r\n\r\n    }, [docCollection, search, uid, cancelled]);\r\n\r\n    useEffect(() => {\r\n        return () => setCancelled(true);\r\n    }, []);\r\n    \r\n    return { documents, loading, error };\r\n};"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,EAAT,QAAmB,oBAAnB;AACA,SACIC,UADJ,EAEIC,KAFJ,EAGIC,OAHJ,EAIIC,UAJJ,EAKIC,KALJ,QAMO,oBANP;AASA,OAAO,MAAMC,iBAAiB,GAAG,UAACC,aAAD,EAA8C;EAAA;;EAAA,IAA9BC,MAA8B,uEAArB,IAAqB;EAAA,IAAfC,GAAe,uEAAT,IAAS;EAE3E,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACc,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAAC,IAAD,CAAlC;EACA,MAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,IAAD,CAAtC,CAJ2E,CAO3E;;EACA,MAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,KAAD,CAA1C;EAEAC,SAAS,CAAC,MAAM;IAEZ,eAAemB,QAAf,GAA0B;MACtB,IAAGF,SAAH,EAAc;MAEdD,UAAU,CAAC,IAAD,CAAV;MAEA,MAAMI,aAAa,GAAG,MAAMlB,UAAU,CAACD,EAAD,EAAKO,aAAL,CAAtC;;MAEA,IAAI;QACA,IAAIa,CAAJ,CADA,CAGA;QACA;;QACA,IAAGZ,MAAH,EAAW;UACPY,CAAC,GAAG,MAAMlB,KAAK,CAACiB,aAAD,EAAgBd,KAAK,CAAC,MAAD,EAAS,gBAAT,EAA2BG,MAA3B,CAArB,EAAyDL,OAAO,CAAC,WAAD,EAAc,MAAd,CAAhE,CAAf;QAEH,CAHD,MAGO;UACHiB,CAAC,GAAG,MAAMlB,KAAK,CAACiB,aAAD,EAAgBhB,OAAO,CAAC,WAAD,EAAc,MAAd,CAAvB,CAAf;QACH;;QAED,MAAMC,UAAU,CAACgB,CAAD,EAAKC,aAAD,IAAmB;UAEnCV,YAAY,CACRU,aAAa,CAACC,IAAd,CAAmBC,GAAnB,CAAwBC,GAAD,KAAU;YAC7BC,EAAE,EAAED,GAAG,CAACC,EADqB;YAE7B,GAAGD,GAAG,CAACE,IAAJ;UAF0B,CAAV,CAAvB,CADQ,CAAZ;QAMH,CARe,CAAhB;QAUAX,UAAU,CAAC,KAAD,CAAV;MACH,CAvBD,CAuBE,OAAOH,KAAP,EAAc;QACZe,OAAO,CAACC,GAAR,CAAYhB,KAAZ;QACAC,QAAQ,CAACD,KAAK,CAACiB,OAAP,CAAR;QAEAd,UAAU,CAAC,KAAD,CAAV;MACH;IAEJ;;IACDG,QAAQ;EAEX,CA1CQ,EA0CN,CAACX,aAAD,EAAgBC,MAAhB,EAAwBC,GAAxB,EAA6BO,SAA7B,CA1CM,CAAT;EA4CAjB,SAAS,CAAC,MAAM;IACZ,OAAO,MAAMkB,YAAY,CAAC,IAAD,CAAzB;EACH,CAFQ,EAEN,EAFM,CAAT;EAIA,OAAO;IAAEP,SAAF;IAAaI,OAAb;IAAsBF;EAAtB,CAAP;AACH,CA3DM;;GAAMN,iB"},"metadata":{},"sourceType":"module"}